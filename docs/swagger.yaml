basePath: /api/v1
definitions:
  models.TodoResponse:
    properties:
      content:
        type: string
      createdAt:
        type: string
      createdBy:
        type: integer
      id:
        type: integer
      updateBy:
        type: integer
      updatedAt:
        type: string
    type: object
  models.UserResponse:
    properties:
      about:
        type: string
      address:
        type: string
      avatar:
        type: string
      birthday:
        type: string
      city:
        type: string
      country:
        type: string
      createdAt:
        type: string
      email:
        type: string
      firstName:
        type: string
      gender:
        type: string
      id:
        type: integer
      lastName:
        type: string
      loginDate:
        type: string
      phoneNumber:
        type: string
      role:
        type: string
      updatedAt:
        type: string
      userId:
        type: string
    type: object
  models.UserWithToken:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/models.UserResponse'
    type: object
host: localhost:5001
info:
  contact:
    email: vukynpro@gmailcom
    name: Vu Ky
    url: https://github.com/vukyn
  description: Example Golang REST API.
  title: Swagger Clean Architecture API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login and return token
      parameters:
      - description: Email
        in: body
        name: Email
        required: true
        schema:
          type: string
      - description: Password
        in: body
        name: Password
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserWithToken'
      summary: Login
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create new user, returns user and token
      parameters:
      - description: First name
        in: body
        name: FirstName
        required: true
        schema:
          type: string
      - description: Last name
        in: body
        name: LastName
        required: true
        schema:
          type: string
      - description: Email
        in: body
        name: Email
        required: true
        schema:
          type: string
      - description: Password
        in: body
        name: Password
        required: true
        schema:
          type: string
      - description: Gender
        in: body
        name: Gender
        required: true
        schema:
          type: string
      - description: City
        in: body
        name: City
        schema:
          type: string
      - description: Country
        in: body
        name: Country
        schema:
          type: string
      - description: Gender
        in: body
        name: Birthday
        schema:
          type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserResponse'
      summary: Create new user
      tags:
      - Auth
  /todo:
    post:
      consumes:
      - application/json
      description: Create todo handler
      parameters:
      - description: Content
        in: body
        name: Content
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.TodoResponse'
      summary: Create todo
      tags:
      - Todo
swagger: "2.0"
